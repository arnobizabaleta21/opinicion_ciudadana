CREATE DATABASE OPINION_CIUDADANA
USE OPINION_CIUDADANA


CREATE TABLE ADMINISTRADORES(
ID_ADMINISTRADOR INT PRIMARY KEY IDENTITY(1,1),
NOMBRE_ADMIN VARCHAR(50) NOT NULL,
APELLIDOS VARCHAR(50) NOT NULL,
CORREO_ELECTRONICO VARCHAR(100) NOT NULL,
CONTRASENA VARBINARY(500) NOT NULL
)


CREATE TABLE INFORMES(
	COD_INFORME INT PRIMARY KEY IDENTITY(1,1),
	NOMBRE VARCHAR(100) NOT NULL,
	RUTA_ARCHIVO VARCHAR(500) NOT NULL,
	FECHA_CREACION DATE NOT NULL,
	HORA_CREACION TIME NOT NULL,
	ID_ADMINISTRADOR INT REFERENCES ADMINISTRADORES(ID_ADMINISTRADOR)

)

CREATE TABLE SONDEOS(
	COD_SONDEO INT PRIMARY KEY IDENTITY(1,1),
	NOMBRE VARCHAR(100) NOT NULL,
	DESCRIPCION VARCHAR(100),
	TEMA VARCHAR(500) NOT NULL,
	FECHA_CREACION DATE NOT NULL,
	HORA_CREACION TIME NOT NULL,
	FECHA_FINAL DATE NOT NULL,
	HORA_FINAL TIME NOT NULL,
	RUTA_IMG VARCHAR(500),
	COD_INFORME INT REFERENCES INFORMES(COD_INFORME)
	
)

CREATE TABLE CIUDADANOS(
TIPO_DOCUMENTO VARCHAR(50) NOT NULL,
NUM_DOCUMENTO VARCHAR(15) PRIMARY KEY,
CONTRASENA VARBINARY(500),
NOMBRES_COMPLETOS VARCHAR(100) NOT NULL,
APELLIDOS VARCHAR(100) NOT NULL,
SEXO VARCHAR(50) NOT NULL,
TELEFONO_CELULAR VARCHAR(12),
TELEFONO_FIJO VARCHAR(10),
CORREO_ELECTRONICO VARCHAR(100) NOT NULL,
MUNICIPIO VARCHAR(100) NOT NULL,
DIRECCION VARCHAR(200),
BARRIO_VEREDA VARCHAR (100) NOT NULL,
FECHA_NACIMIENTO DATE NOT NULL,
ETNIA VARCHAR(100) NOT NULL,
CONDICION_DISCAPACIDAD VARCHAR(200) NOT NULL,
ESTRATO_RESIDENCIA VARCHAR(2) NOT NULL,
NIVEL_EDUCATIVO VARCHAR(200) NOT NULL,
ACCESO_DISPOSITIVOS BIT NOT NULL,
TIPO_DISPOSITIVOS VARCHAR(50) DEFAULT NULL,
CONECTIVIDAD BIT NOT NULL,
AFILIACION VARCHAR(50) NOT NULL
)

CREATE TABLE PARTICIPADORES_SONDEO(
	COD_SONDEO INT REFERENCES SONDEOS(COD_SONDEO),
	ID_CIUDADANO VARCHAR(15) REFERENCES CIUDADANOS(NUM_DOCUMENTO),
	FECHA_PART DATE NOT NULL,
	HORA_PART TIME NOT NULL,
)
ALTER TABLE PARTICIPADORES_SONDEO ADD RESPUESTAS VARCHAR(500)

CREATE TABLE CERTIFICADOS(
ID_CERTIFICADO VARCHAR(6) PRIMARY KEY,
FECHA_GENERACION DATE NOT NULL,
RUTA_ARCHIVO VARCHAR(500) NOT NULL,
NUM_DOCUMENTO VARCHAR(15) REFERENCES CIUDADANOS(NUM_DOCUMENTO)
)

CREATE TABLE PREGUNTAS(
COD_PREGUNTA INT PRIMARY KEY IDENTITY(1,1),
DESCRIPCION VARCHAR(500) NOT NULL
)

CREATE TABLE PREGUNTAS_DEL_SONDEO(
	COD_PREGUNTA INT REFERENCES PREGUNTAS(COD_PREGUNTA),
	COD_SONDEO INT REFERENCES SONDEOS(COD_SONDEO),
	RESPUESTA VARCHAR(500) DEFAULT NULL
)

/*Crear procedimiento de almacenado para encryptarClave*/

CREATE FUNCTION ENCRYPTAR(@CLAVE VARCHAR(MAX))
RETURNS VARBINARY(MAX)
AS 
BEGIN
	DECLARE @PASS AS VARBINARY(MAX);
	SET @PASS = ENCRYPTBYPASSPHRASE('CONTRASENA',@CLAVE );
	RETURN @PASS


END

/*Crear procedimiento de almacenado para desencryptarClave*/
CREATE FUNCTION DESENCRYPTAR(@CLAVE VARBINARY(MAX) )
RETURNS VARCHAR(MAX)
AS 
BEGIN
	DECLARE @PASS AS VARCHAR(MAX);
	SET @PASS =DECRYPTBYPASSPHRASE('CONTRASENA',@CLAVE );
	RETURN @PASS


END
/*Crear procedimeinto almacenado para registrar Ciudadanos*/

CREATE PROCEDURE SP_REGISTRARCIUDADANO(
	@TIPO_DOCUMENTO VARCHAR(50),
	@NUM_DOCUMENTO VARCHAR(15) ,
	@NOMBRES_COMPLETOS VARCHAR(100),
	@CONTRASENA VARCHAR(500),
	@APELLIDOS VARCHAR(100) ,
	@SEXO VARCHAR(50) ,
	@TELEFONO_CELULAR VARCHAR(12),
	@TELEFONO_FIJO VARCHAR(10),
	@CORREO_ELECTRONICO VARCHAR(100),
	@MUNICIPIO VARCHAR(100) ,
	@DIRECCION VARCHAR(200),
	@BARRIO_VEREDA VARCHAR (100) ,
	@FECHA_NACIMIENTO DATE,
	@ETNIA VARCHAR(100),
	@CONDICION_DISCAPACIDAD VARCHAR(200),
	@ESTRATO_RESIDENCIA VARCHAR(2),
	@NIVEL_EDUCATIVO VARCHAR(200) ,
	@ACCESO_DISPOSITIVOS BIT ,
	@TIPO_DISPOSITIVOS VARCHAR(50) ,
	@CONECTIVIDAD BIT ,
	@AFILIACION VARCHAR(50),
	@REGISTRADO BIT OUTPUT,
	@MENSAJE VARCHAR(100) OUTPUT
)
AS 
BEGIN
	IF(NOT EXISTS(SELECT * FROM CIUDADANOS WHERE NUM_DOCUMENTO = @NUM_DOCUMENTO AND dbo.DESENCRYPTAR(CONTRASENA)  = @CONTRASENA))
		BEGIN
			INSERT INTO CIUDADANOS(	TIPO_DOCUMENTO,
	NUM_DOCUMENTO ,
	NOMBRES_COMPLETOS,
	CONTRASENA ,
	APELLIDOS,
	SEXO ,
	TELEFONO_CELULAR,
	TELEFONO_FIJO ,
	CORREO_ELECTRONICO ,
	MUNICIPIO ,
	DIRECCION,
	BARRIO_VEREDA ,
	FECHA_NACIMIENTO ,
	ETNIA ,
	CONDICION_DISCAPACIDAD ,
	ESTRATO_RESIDENCIA ,
	NIVEL_EDUCATIVO ,
	ACCESO_DISPOSITIVOS ,
	TIPO_DISPOSITIVOS  ,
	CONECTIVIDAD,
	AFILIACION) VALUES(@TIPO_DOCUMENTO,@NUM_DOCUMENTO ,
	@NOMBRES_COMPLETOS,
	dbo.ENCRYPTAR(@CONTRASENA) ,
	@APELLIDOS,
	@SEXO ,
	@TELEFONO_CELULAR,
	@TELEFONO_FIJO ,
	@CORREO_ELECTRONICO ,
	@MUNICIPIO ,
	@DIRECCION,
	@BARRIO_VEREDA ,
	@FECHA_NACIMIENTO ,
	@ETNIA ,
	@CONDICION_DISCAPACIDAD ,
	@ESTRATO_RESIDENCIA ,
	@NIVEL_EDUCATIVO ,
	@ACCESO_DISPOSITIVOS ,
	@TIPO_DISPOSITIVOS  ,
	@CONECTIVIDAD,
	@AFILIACION )
		SET @REGISTRADO = 1;
		SET @MENSAJE = 'Usuario o Contraseña no coinciden';
		END
	ELSE
		BEGIN
		SET @REGISTRADO = 0;
		SET @MENSAJE ='El usuario con  ese identificación ya está registrado';
		END
END


		
/*Verificar ciudadanos registrados*/

SELECT * FROM ciudadanos

/*Crear procedimeinto almacenado para registrar Administradores*/
CREATE PROCEDURE SP_REGISTRARADMIN(
	@NOMBRE_ADMIN VARCHAR(50) ,
	@APELLIDOS VARCHAR(50),
	@CORREO_ELECTRONICO VARCHAR(100) ,
	@CONTRASENA VARCHAR(500),
	@REGISTRADO BIT OUTPUT,
	@MENSAJE VARCHAR(100) OUTPUT
)
AS 
BEGIN
	IF(NOT EXISTS(SELECT * FROM ADMINISTRADORES WHERE CORREO_ELECTRONICO = @CORREO_ELECTRONICO AND dbo.DESENCRYPTAR(CONTRASENA)  = @CONTRASENA))
		BEGIN
		 INSERT INTO ADMINISTRADORES(NOMBRE_ADMIN,APELLIDOS,CORREO_ELECTRONICO,CONTRASENA) VALUES(@NOMBRE_ADMIN,@APELLIDOS,@CORREO_ELECTRONICO,dbo.ENCRYPTAR(@CONTRASENA))
		SET @REGISTRADO = 1;
		SET @MENSAJE = 'Usuario o Contraseña no coinciden';
		END
		
	ELSE
		BEGIN
		SET @REGISTRADO = 0;
		SET @MENSAJE ='El usuario con ese correo ya está registrado';
		END
END

/*VERIFICACIÓN DE INFORMACIÓN Y QUERIES PARA EJECUTAR EN BACK*/
/*SELECT * FROM CIUDADANOS WHERE NUM_DOCUMENTO = '500772' AND dbo.DESENCRYPTAR(CONTRASENA)  = 500772*/

/*Verificar ciudadanos registrados*/
/*Verificar ADMINISTRADORES registrados*/

SELECT * FROM ADMINISTRADORES
SELECT * FROM SONDEOS
